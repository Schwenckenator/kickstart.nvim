{
	"reactCustomHook": {
		"prefix": "rh",
		"body": [
			"/**\n * $1\n */",
			"export default function ${TM_FILENAME_BASE}() {",
			"  $0",
			"}\n"
		],
		"description": "Creates a custom hook without props"
	},
	"reactCustomHookWithProps": {
		"prefix": "rhp",
		"body": [
			"type IProps = {\n${2://TODO}\n\n}",
			"/**\n * ${1:TODO}\n */",
			"export default function ${TM_FILENAME_BASE}(props: IProps) {",
			"  $0",
			"}\n\n"
		],
		"description": "Creates a custom hook with props"
	},
	"reactFormHook": {
		"prefix": "formHook",
		"body": [
			"import { useRouter } from 'next/navigation'",
			"import { useTranslations } from 'next/intl'",
			"import { useEffect, useState } from 'react'",
			"",
			"import { IError } from '@/11_types/ErrorType'",
			"import useNotification from '@/30_hooks/useNotification'",
			"",
			"type IForm = {",
			"  ${2:TODO}",
			"}",
			"",
			"const initForm: IForm = {",
			"$3",
			"}",
			"",
			"/**",
			"*${1: TODO Documentation}",
			"*/",
			"export default function ${TM_FILENAME_BASE}() {",
			"  const t = useTranslations('$4')",
			"",
			"  const { showErrorNotification } = useNotification()",
			"  const router = useRouter()",
			"  const [form, setForm] = useState<IForm>({ ...initForm })",
			"  const [hasError, setHasError] = useState(false)",
			"  const errors = getErrors() {",
			"    ${5: // TODO Error handling}",
			"  }",
			"",
			"  const handleChange = (key: keyof IForm) => (value: any) => {",
			"    setForm((prev) => ({",
			"      ...prev,",
			"      [key]: value,",
			"    }))",
			"  }",
			"",
			"  const handleSubmit = () => {",
			"    const errArray = Object.values(errors)",
			"    if(errArray.length > 0) {",
			"      showErrorNotification(errArray.join('\n'))",
			"      setHasError(true)",
			"      return",
			"    }",
			"    ${6: // TODO handle Sumbit}",
			"  }",
			"  return {",
			"	 form,",
			"	errors,",
			"	hasError,",
			"	handleChange,",
			"	handleSubmit,",
			"  }",
			"}"
		],
		"description": "Create a MCS form hook"
	},
	"reactUseEffect": {
		"prefix": "ue",
		"body": [
			"useEffect(() => {",
			"  $0",
			"}, [$1])\n"
		],
		"description": "React useEffect hook"
	},
	"playwrightTest": {
		"prefix": "pt",
		"body": [
			"test('$1', async ({$2}) => {",
			"  $0",
			"})"
		],
		"description": "Playwright Test case"
	},
	"playwrightDescribe": {
		"prefix": "pd",
		"body": [
			"test.describe('$1', () => {",
			"  $0",
			"})"
		],
		"description": "Playwright Describe"
	},
	"playwrightBeforeEach": {
		"prefix": "pbe",
		"body": [
			"test.beforeEach(async ({$1}) => {",
			"  $0",
			"})"
		],
		"description": "Playwright BeforeEach hook"
	},
	"playwrightAfterEach": {
		"prefix": "pae",
		"body": [
			"test.afterEach(async ({$1}) => {",
			"  $0",
			"})"
		],
		"description": "Playwright AfterEach hook"
	}
}
